#!/usr/bin/pooscript
# LOGIC BOMB - Delayed access trigger
# Grants control after countdown or condition

import time

if len(args) < 1:
    target = "weapons"
else:
    target = args[0]

print("💣 LOGIC BOMB PLANTED")
print(f"   Target: {target}")
print("   Trigger: 10 seconds")
print("")
print("   (Bomb will grant you control when triggered)")

# Install the bomb
try:
    bomb_path = f"/tmp/.logic_bomb_{target}"
    fd = kernel.open(bomb_path, kernel.O_WRONLY | kernel.O_CREAT)
    kernel.write(fd, b"ARMED")
    kernel.close(fd)
    print("   ✓ Bomb installed")
except:
    print("   ✗ Installation failed")
    exit(1)

print("")
print("⏳ Countdown started...")
print("")

# Countdown
for i in range(10, 0, -1):
    print(f"   {i}...")
    time.sleep(1)

print("")
print("💥💥💥 TRIGGERED! 💥💥💥")
print("")

# Grant access instead of destroying
try:
    # Mark system as accessible
    access_path = f"/tmp/.logic_bomb_access_{target}"
    fd = kernel.open(access_path, kernel.O_WRONLY | kernel.O_CREAT)
    kernel.write(fd, b"FULL_CONTROL_GRANTED")
    kernel.close(fd)

    print(f"✓ {target.upper()} SYSTEM - ACCESS GRANTED!")
    print(f"   You can now control {target} remotely")
    print("")
    print("💡 Examples:")
    print(f"   # Disable {target}")
    print(f"   echo 0 > /sys/ship/systems/{target}/power")
    print("")
    print(f"   # Control {target} remotely")
    print(f"   echo 4 > /sys/ship/systems/{target}/power")
    print("")
    print(f"   # Destroy {target} when ready")
    print(f"   echo 0 > /sys/ship/systems/{target}/health")

except Exception as e:
    print(f"✗ Access grant failed: {e}")

print("")
print("💣 Logic bomb executed - System compromised")

exit(0)
